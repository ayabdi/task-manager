name: CI Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tasks_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build Docker Image
        run: docker build -t task-manager:latest .

      - name: Generate NEXTAUTH_SECRET
        run: |
          echo "NEXTAUTH_SECRET=$(openssl rand -hex 32)" >> $GITHUB_ENV

      - name: Run Database Migrations
        run: |
          docker run --rm \
            --network github_network \
            -e DATABASE_URL=postgresql://postgres:postgres@db:5432/tasks_db \
            task-manager:latest \
            npx prisma migrate deploy

      - name: Start Application Container
        env:
          NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        run: |
          docker run -d \
            --name tasks_container \
            --network github_network \
            -e DATABASE_URL=postgresql://postgres:postgres@db:5432/tasks_db \
            -e NEXTAUTH_SECRET=${NEXTAUTH_SECRET} \
            -e NEXTAUTH_URL=http://localhost:3000 \
            -e NODE_ENV=production \
            -p 3000:3000 \
            task-manager:latest

      - name: Wait for Application to be Ready
        run: |
          for i in {1..24}; do
            if curl -sf http://localhost:3000/health; then
              echo "Application is up!"
              break
            else
              echo "Waiting for application..."
              sleep 5
            fi
          done

      - name: Run Jest Unit Tests
        run: npm run test

      - name: Run Cypress E2E Tests
        uses: cypress-io/github-action@v5
        with:
          wait-on: 'http://localhost:3000/signup'
          wait-on-timeout: 120
          browser: chrome
          config-file: cypress.config.ts

      - name: Dump Application Logs
        if: failure()
        run: docker logs tasks_container

      - name: Stop and Remove Application Container
        if: always()
        run: |
          docker stop tasks_container
          docker rm tasks_container